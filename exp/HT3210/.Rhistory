nt<- window(nottem, start=c(1939,1), end=c(1939,12))
nt
ntAjuste = cbind(nt ,pronostico$mean )
ntAjuste
(1/12)* sum((pronostico$mean - nt)^2)
ggplot(nt, aes(y = nt, x=time(nt)))+geom_line()+geom_smooth(se=FALSE)
ggplot(nt, aes(y = nt, x=time(nt)))+geom_line()+geom_smooth(se=FALSE)
data("nottem")
View(nottem)
plot(nottem, col = "magenta")
start(nottem)
end(nottem)
plot(nottem, col = "magenta")
nottem.ts <- ts(nottem, frequency = 12, start = c(1920, 1), end = c(1938, 12))
nottem.train <- ts(nottem, frequency = 12, start = c(1920,1), end = c(1934,12))
nottem.test <- ts(nottem, frequency = 12, start = c(1935,1), end = c(1938,12))#
modelo1 <- auto.arima(nottem.ts, stationary = TRUE, seasonal = TRUE)
summary(modelo1)
pronostico <- forecast(modelo1, h = 12)
pronostico
pronostico$mean
plot(pronostico)
(1/12)* sum((pronostico$mean - nt)^2)
ggplot(nt, aes(y = nt, x=time(nt)))+geom_line()+geom_smooth(se=FALSE)
load("C:\\Users\\Tomás García\\Desktop\\FAD\\TP4\\acath.sav")
library(ggplot2)
library(knitr)
load("C:\\Users\\Tomás García\\Desktop\\FAD\\TP4\\acath.sav")
attach(acath)
logit1var<- glm(sigdz ~  colesthe, data = acath, family = "binomial")
logit1var<- glm(sigdz ~  choleste, data = acath, family = "binomial")
logit1var<- glm(sigdz ~  choleste, data = acath, family = "binomial")
summary(logit1var)
mydata <- read.csv("binary.csv")
mydata <- read.csv("binary.csv")
mydata <- read.csv("binary.csv")
library(ggplot2)
library(knitr)
```
library(ggplot2)
library(knitr)
mydata <- read.csv("binary.csv")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(ggplot2)
mydata <- read.csv("binary.csv")
mydata <- read_csv("binary.csv")
mydata <- read.csv("binary.csv")
mydata <- read.csv("binary.csv")
mydata <- read.csv("binary.csv")
mydata <- read.csv("C:\Users\Tomás García\Desktop\FAD\TP4\Programas\binary.csv")
mydata <- read.csv("Users\Tomás García\Desktop\FAD\TP4\Programas\binary.csv")
mydata <- read.csv("~\Users\Tomás García\Desktop\FAD\TP4\Programas\binary.csv")
mydata <- read.csv("~Users\Tomás García\Desktop\FAD\TP4\Programas\binary.csv")
mydata <- read.csv("~\binary.csv")
mydata <- read.csv("~\binary.csv")
mydata <- read.csv("~binary.csv")
mydata <- read.csv("~\binary.csv")
mydata <- read.csv("Cbinary.csv")
mydata <- read.csv("binary.csv")
load("C:\\Users\\Tomás García\\Desktop\\FAD\\TP4\\acath.sav")
attach(acath)
logit1var<- glm(sigdz ~  choleste, data = acath, family = "binomial")
summary(logit1var)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
attach(mydata)
mydata <- read.csv("binary.csv")
attach(mydata)
head(mydata)
logit1var<- glm(admit ~  gpa, data = mydata, family = "binomial")
summary(logit1var)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
load("C:\\Users\\Tomás García\\Desktop\\FAD\\TP4\\acath.sav")
attach(acath)
dim(mydata)
head(mydata)
logit1var<- glm(sigdz ~  choleste, data = acath, family = "binomial")
summary(logit1var)
e^(-0.7525280 + 0.0062268 * 199)/(1 + e^(-0.7525280 + 0.0062268 * 199))
exp(-0.7525280 + 0.0062268 * 199)/(1 + exp(-0.7525280 + 0.0062268 * 199))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + duracion, data = acath, family = "binomial")
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial")
summary(logit1var)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial")
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial")
summary(logit1var)
exp(-2.915806 + 0.005571 * choleste + 19.455409 * tvdlm + 0.036243 * age + (0.003787) * cad.dur)/(1 + exp(-2.915806 + 0.005571 * choleste + 19.455409 * tvdlm + 0.036243 * age + (0.003787) * cad.dur))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial", factor=sex)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial", sex = factor(c(1,2)))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial", sex = factor(c(0,1)))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath, family = "binomial", sex = factor(c(0,1)))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath, family = "binomial", sex = factor(c(1,2)))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath, family = "binomial")
summary(logit1var)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial" , sex=factor(c(1)))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath, family = "binomial" , sex=factor(c(1)))
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath, family = "binomial" , sex=1)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath, family = "binomial")
acath$sex <- factor(acath$sex)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath, family = "binomial")
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath$sex, family = "binomial")
summary(logit1var)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath$sex, family = "binomial")
summary(logit1var)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath$sex, family = "binomial")
summary(logit1var)
acath$1 <- factor(acath$sex)
acath1 <- factor(acath$sex)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur, data = acath1, family = "binomial")
summary(logit1var)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath$sex, family = "binomial")
summary(logit1var)
mydata$rank <- factor(mydata$rank)
logit3var<- glm(admit ~ gre + gpa + rank, data = mydata, family = "binomial")
summary(logit3var)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath$sex, family = "binomial")
acath$sex <- factor(acath$sex)
summary(logit1var)
acath$sex <- factor(acath$sex)
logit1var<- glm(sigdz ~  choleste + tvdlm + age + cad.dur + sex, data = acath$sex, family = "binomial")
summary(logit1var)
summary(logit1var)
#-------ejercicio a
#--------------------------------
data("nottem")
View(nottem)
start(nottem)
end(nottem)
plot(nottem, col = "magenta")
plot(nottem, col = "darkgrey")
plot(nottem, col = "darkgrey")
plot(nottem,
col = "darkgrey",
main="Gráfico de la Serie",
xlab="Mes-Año",
ylab="Temperatura")
nottem.ts <- ts(nottem, frequency = 12, start = c(1920, 1), end = c(1938, 12))
nottem.train <- ts(nottem, frequency = 12, start = c(1920,1), end = c(1934,12))
nottem.test <- ts(nottem, frequency = 12, start = c(1935,1), end = c(1938,12))
modelo1 <- auto.arima(nottem.ts, stationary = TRUE, seasonal = TRUE)
nottem.ts <- ts(nottem, frequency = 12, start = c(1920, 1), end = c(1938, 12))
nottem.train <- ts(nottem, frequency = 12, start = c(1920,1), end = c(1934,12))
nottem.test <- ts(nottem, frequency = 12, start = c(1935,1), end = c(1938,12))
modelo1 <- auto.arima(nottem.ts, stationary = TRUE, seasonal = TRUE)
summary(modelo1)
#-------ejercicio a
#--------------------------------
data("nottem")
nottem.ts <- ts(nottem, frequency = 12, start = c(1920, 1), end = c(1938, 12))
nottem.train <- ts(nottem, frequency = 12, start = c(1920,1), end = c(1934,12))
nottem.test <- ts(nottem, frequency = 12, start = c(1935,1), end = c(1938,12))
modelo1 <- auto.arima(nottem.ts, stationary = TRUE, seasonal = TRUE)
modelo1 <- arima(nottem.ts, stationary = TRUE, seasonal = TRUE)
library(forecast)
modelo1 <- auto.arima(nottem.ts, stationary = TRUE, seasonal = TRUE)
summary(modelo1)
pronostico <- forecast(modelo1, h = 12)
pronostico
pronostico$mean
plot(pronostico)
nt <- window(nottem, start=c(1939,1), end=c(1939,12))
nt
ntAjuste = cbind(nt, pronostico$mean )
ntAjuste
ggplot(nt, aes(y = nt, x=time(nt)))+geom_line()+geom_smooth(se=FALSE)
(1/12)* sum((pronostico$mean - nt)^2)
ggplot(nt, aes(y = nt, x=time(nt)))+geom_line()+geom_smooth(se=FALSE)
library(forecast)
library("forecast")
#-------ejercicio a
#--------------------------------
data("nottem")
View(nottem)
plot(nottem, col = "magenta")
plot(nottem,
col = "darkgrey",
main="Gráfico de la Serie",
xlab="Mes-Año",
ylab="Temperatura")
nottem.ts <- ts(nottem, frequency = 12, start = c(1920, 1), end = c(1938, 12))
nottem.train <- ts(nottem, frequency = 12, start = c(1920,1), end = c(1934,12))
nottem.test <- ts(nottem, frequency = 12, start = c(1935,1), end = c(1938,12))
modelo1 <- auto.arima(nottem.ts, stationary = TRUE, seasonal = TRUE)
summary(modelo1)
#--------------------------------------------------------------------------------------
boxplot(nottem.ts ~ cycle(nottem.ts), col = "pink")
#--------------------------------------------------------------------------------------
boxplot(nottem.ts ~ cycle(nottem.ts), col = "darkgrey")
#--------------------------------------------------------------------------------------
boxplot(nottem.ts ~ cycle(nottem.ts),
col = "darkgrey",
main="Boxplot de la Serie por ciclos",
xlab="Mes-Año",
ylab="Temperatura"))
#--------------------------------------------------------------------------------------
boxplot(nottem.ts ~ cycle(nottem.ts),
col = "darkgrey",
main="Boxplot de la Serie por ciclos",
xlab="Mes-Año",
ylab="Temperatura")
pronostico <- forecast(modelo1, h = 12)
pronostico
pronostico$mean
plot(pronostico)
nt <- window(nottem, start=c(1939,1), end=c(1939,12))
nt
ntAjuste = cbind(nt, pronostico$mean )
ntAjuste
(1/12)* sum((pronostico$mean - nt)^2)
ggplot(nt, aes(y = nt, x=time(nt)))+geom_line()+geom_smooth(se=FALSE)
install.packages("data.table")
install.packages("rlist")
install.packages("data.table")
#Optimizacion Bayesiana de hiperparametros de  rpart
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("rpart")
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
#Defino la  Optimizacion Bayesiana
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
hs  <- makeParamSet(
makeNumericParam("cp"       , lower= -1   , upper=    0.1),
makeIntegerParam("minsplit" , lower=  1L  , upper= 8000L),  #la letra L al final significa ENTERO
makeIntegerParam("minbucket", lower=  1L  , upper= 2000L),
makeIntegerParam("maxdepth" , lower=  3L  , upper=   20L),
forbidden = quote( minbucket > 0.5*minsplit ) )             # minbuket NO PUEDE ser mayor que la mitad de minsplit
ksemilla_azar  <- 102191   #cambiar por la primer semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0( folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#fold_test  tiene el numero de fold que voy a usar para testear, entreno en el resto de los folds
#param tiene los hiperparametros del arbol
ArbolSimple  <- function( fold_test, data, param )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= data[ fold != fold_test, ],  #entreno en todo MENOS el fold_test que uso para testing
xval= 0,
control= param )
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,
data[ fold==fold_test, ],  #aplico el modelo sobre los datos de testing
type= "prob")   #quiero que me devuelva probabilidades
prob_baja2  <- prediccion[, "BAJA+2"]  #esta es la probabilidad de baja
#calculo la ganancia
ganancia_testing  <- data[ fold==fold_test ][ prob_baja2 > 1/60,
sum( ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) )]
return( ganancia_testing )  #esta es la ganancia sobre el fold de testing, NO esta normalizada
}
#------------------------------------------------------------------------------
ArbolesCrossValidation  <- function( data, param, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )  # generalmente  c(1, 1, 1, 1, 1 )  cinco unos
particionar( data, divi, seed=semilla, agrupa=pagrupa )  #particiono en dataset en folds
ganancias  <- mcmapply( ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #se puede subir a qfolds si posee Linux o Mac OS
data[ , fold := NULL ]
#devuelvo la primer ganancia y el promedio
ganancia_promedio  <- mean( unlist( ganancias ) )   #promedio las ganancias
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds  #aqui normalizo la ganancia
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros, lamentablemente se pasan como variables globales
EstimarGanancia  <- function( x )
{
GLOBAL_iteracion  <<-  GLOBAL_iteracion + 1
xval_folds  <- 5
ganancia  <- ArbolesCrossValidation( dataset,
param= x, #los hiperparametros del arbol
qfolds= xval_folds,  #la cantidad de folds
pagrupa= "clase_ternaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx,  arch= archivo_log )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui empieza el programa
setwd("C:\\Users\\Tomás García\\Documents\\MD")
#cargo el dataset
dataset  <- fread("./datasets/paquete_premium_202011.csv")   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT3210/", showWarnings = FALSE )
setwd("C:\\Users\\Tomás García\\Documents\\MD\\labo\\exp\\HT3210\\")   #Establezco el Working Directory DEL EXPERIMENTO
archivo_log  <- "HT321.txt"
archivo_BO   <- "HT321.RDATA"
#leo si ya existe el log, para retomar en caso que se se corte el programa
GLOBAL_iteracion  <- 0
if( file.exists(archivo_log) )
{
tabla_log  <- fread( archivo_log )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar  <- EstimarGanancia
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= archivo_BO)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( archivo_BO ) ) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( archivo_BO )   #retomo en caso que ya exista
install.packages("data.table")
install.packages("data.table")
install.packages("rlist")
install.packages("rpart")
install.packages("parallel")
install.packages("DiceKriging")
install.packages("mlrMBO")
#Optimizacion Bayesiana de hiperparametros de  rpart
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("rpart")
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
#Defino la  Optimizacion Bayesiana
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
hs  <- makeParamSet(
makeNumericParam("cp"       , lower= -1   , upper=    0.1),
makeIntegerParam("minsplit" , lower=  1L  , upper= 8000L),  #la letra L al final significa ENTERO
makeIntegerParam("minbucket", lower=  1L  , upper= 2000L),
makeIntegerParam("maxdepth" , lower=  3L  , upper=   20L),
forbidden = quote( minbucket > 0.5*minsplit ) )             # minbuket NO PUEDE ser mayor que la mitad de minsplit
ksemilla_azar  <- 102191   #cambiar por la primer semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0( folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#fold_test  tiene el numero de fold que voy a usar para testear, entreno en el resto de los folds
#param tiene los hiperparametros del arbol
ArbolSimple  <- function( fold_test, data, param )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= data[ fold != fold_test, ],  #entreno en todo MENOS el fold_test que uso para testing
xval= 0,
control= param )
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,
data[ fold==fold_test, ],  #aplico el modelo sobre los datos de testing
type= "prob")   #quiero que me devuelva probabilidades
prob_baja2  <- prediccion[, "BAJA+2"]  #esta es la probabilidad de baja
#calculo la ganancia
ganancia_testing  <- data[ fold==fold_test ][ prob_baja2 > 1/60,
sum( ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) )]
return( ganancia_testing )  #esta es la ganancia sobre el fold de testing, NO esta normalizada
}
#------------------------------------------------------------------------------
ArbolesCrossValidation  <- function( data, param, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )  # generalmente  c(1, 1, 1, 1, 1 )  cinco unos
particionar( data, divi, seed=semilla, agrupa=pagrupa )  #particiono en dataset en folds
ganancias  <- mcmapply( ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #se puede subir a qfolds si posee Linux o Mac OS
data[ , fold := NULL ]
#devuelvo la primer ganancia y el promedio
ganancia_promedio  <- mean( unlist( ganancias ) )   #promedio las ganancias
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds  #aqui normalizo la ganancia
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros, lamentablemente se pasan como variables globales
EstimarGanancia  <- function( x )
{
GLOBAL_iteracion  <<-  GLOBAL_iteracion + 1
xval_folds  <- 5
ganancia  <- ArbolesCrossValidation( dataset,
param= x, #los hiperparametros del arbol
qfolds= xval_folds,  #la cantidad de folds
pagrupa= "clase_ternaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx,  arch= archivo_log )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui empieza el programa
setwd("C:\\Users\\Tomás García\\Documents\\MD")
#cargo el dataset
dataset  <- fread("./datasets/paquete_premium_202011.csv")   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT3210/", showWarnings = FALSE )
setwd("C:\\Users\\Tomás García\\Documents\\MD\\labo\\exp\\HT3210\\")   #Establezco el Working Directory DEL EXPERIMENTO
archivo_log  <- "HT321.txt"
archivo_BO   <- "HT321.RDATA"
#leo si ya existe el log, para retomar en caso que se se corte el programa
GLOBAL_iteracion  <- 0
if( file.exists(archivo_log) )
{
tabla_log  <- fread( archivo_log )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar  <- EstimarGanancia
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= archivo_BO)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( archivo_BO ) ) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( archivo_BO )   #retomo en caso que ya exista
